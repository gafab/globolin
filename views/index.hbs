<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PageFlip PDF Newsletter</title>
    <link rel="stylesheet" href="https://unpkg.com/page-flip/dist/js/page-flip.browser.css">
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        #flipbook {
            width: 80%;
            height: 80%;
        }
    </style>
</head>
<body>
    <div id="flipbook" class="container"></div>

    <script src="https://unpkg.com/page-flip/dist/js/page-flip.browser.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.worker.min.js"></script>

    <script>
        let pageFlip;
        let currentOrientation;
        let widthFactor = {value: 2.5, modified: false}; 
        async function loadPDF(pdfUrl) {
            const pdf = await pdfjsLib.getDocument(pdfUrl).promise;
            const scale = 1.5;
            const renderPage = async (pageNum) => {
                const page = await pdf.getPage(pageNum);
                const viewport = page.getViewport({ scale: scale });
                const canvas = document.createElement("canvas");
                const context = canvas.getContext("2d");

                canvas.height = viewport.height;
                canvas.width = viewport.width;

                await page.render({ canvasContext: context, viewport: viewport }).promise;
                return canvas.toDataURL();
            };

            const pages = await Promise.all(
                Array.from({ length: pdf.numPages }, (_, i) => renderPage(i + 1))
            );

            return pages;
        }

        function initializePageFlip(pages, isLandscape) {
            const container = document.getElementById("flipbook");
            container.innerHTML = ''; // Clear the container before reinitializing
            const flipWidth = isLandscape ? container.clientWidth : container.clientWidth * widthFactor.value; // Adjust the width for portrait mode
            if(!widthFactor.modified){
                widthFactor.value = 0.8;
                widthFactor.modified = true;
            }
            const flipHeight = container.clientHeight*1.5;
            const pageWidth = flipWidth
            const pageHeight = flipHeight;

            pageFlip = new St.PageFlip(container, {
                width: pageWidth,
                height: pageHeight,
                size: "stretch",
                minWidth: 300,
                maxWidth: 1200,
                minHeight: 400,
                maxHeight: 1600,
                maxShadowOpacity: 0.5,
                showCover: true,
                mobileScrollSupport: false,
                usePortrait: !isLandscape, // Adjust orientation
                showPageCorners: true, // Show corners of pages
                flippingTime: 1000, // Adjust the flipping time
            });

            if (isLandscape) {
                // Split pages into pairs for landscape mode
                const pairedPages = [];
                for (let i = 0; i < pages.length; i += 2) {
                    pairedPages.push(pages.slice(i, i + 2));
                }
                pageFlip.loadFromImages(pairedPages.flat());
            } else {
                // Load single pages for portrait mode
                pageFlip.loadFromImages(pages);
            }
        }

        function handleResize(pages) {
            const isLandscape = window.innerWidth > window.innerHeight;
            console.log(`Orientation changed: ${isLandscape ? 'Landscape' : 'Portrait'}`);
            if (currentOrientation !== isLandscape) {
                currentOrientation = isLandscape;
                initializePageFlip(pages, isLandscape);
            }
        }

        document.addEventListener("DOMContentLoaded", function() {
            loadPDF("newsletter").then((pages) => {
                currentOrientation = window.innerWidth > window.innerHeight;
                console.log(`Initial Orientation: ${currentOrientation ? 'Landscape' : 'Portrait'}`);
                initializePageFlip(pages, currentOrientation);
                window.addEventListener('resize', () => handleResize(pages));
            });
        });
    </script>
</body>
</html>
